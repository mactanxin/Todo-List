{"version":3,"sources":["todos.js","AddTask.js","App.js","serviceWorker.js","index.js"],"names":["Todos","_ref","todos","deleteTask","s","console","log","todoList","length","map","todo","react_default","a","createElement","className","key","id","content","onClick","AddTodo","state","handleSubmit","e","preventDefault","_this","props","addTask","handleChange","setState","target","value","onSubmit","this","type","onChange","Component","App","filter","Cookies","remove","present","i","displayAlert","document","getElementById","innerHTML","Math","random","concat","Object","toConsumableArray","set","JSON","stringify","expires","obj","values","get","parse","src_todos","AddTask","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e08b3156.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Todos = ({todos, deleteTask, s}) => {\r\n    console.log(todos);\r\n    const todoList = todos.length ? (\r\n        todos.map(todo => {\r\n            return (\r\n                <div className=\"collection-item\" key={todo.id}>\r\n                    <span>{todo.content}</span><pre></pre>\r\n                    <button className=\"waves-effect waves-light btn-small\" onClick={() => {deleteTask(todo.id)}}>Delete</button>\r\n                </div>\r\n            )\r\n        })\r\n    ) : (\r\n        <p className=\"center\">You have no tasks left! :)</p>\r\n    )\r\n\r\n    return (\r\n        <div className=\"todos collection\">\r\n            {todoList}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todos","import React, {Component} from 'react'\r\n\r\nclass AddTodo extends Component{\r\n    state= {\r\n        content: ''\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTask(this.state);\r\n\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            content: e.target.value\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label>Add Task</label>\r\n                    <input type=\"text\" onChange={this.handleChange}></input><button className=\"waves-effect waves-light btn-small\">Submit</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTodo","import React, {Component} from 'react';\nimport Todos from './todos'\nimport AddTodo from './AddTask'\nimport Cookies from 'js-cookie'\n\nclass App extends Component{\n  state = {\n    todos: [\n      \n    ]\n  }\n  s = true;\n  componentDidMount(){\n    const c = Object.values(Cookies.get());\n    var obj = c.map(todo => {\n      return(JSON.parse(todo))\n    });\n    this.setState({\n      todos: obj\n    })\n  }\n  displayAlert(type){\n    if(type === \"error\"){\n      document.getElementById('alert').innerHTML = \"You have not completed this task on your list yet! :(\";\n    }\n  }\n  deleteTask = (id) => {\n    const todos = this.state.todos.filter(todo => {\n      return todo.id !== id;\n    })\n    Cookies.remove(id);\n    this.setState({\n      todos: todos\n    })\n  }\n  addTask = (todo) => {\n    // check if duplicate\n    var present = false;\n    for(var i in this.state.todos){\n      if(this.state.todos[i].content === todo.content){\n        present = true;\n      }\n    }\n\n    if(!present){\n      document.getElementById('alert').innerHTML = \"\";\n      todo.id = Math.random();\n      const todos = [...this.state.todos, todo];\n      this.setState({\n        todos: todos\n      })\n      Cookies.set(todo.id, JSON.stringify(todo), { expires: 30 });\n      this.s = false;\n    }else{\n      this.displayAlert(\"error\");\n    }\n  }\n  render(){\n    console.log(this.state.todos)\n    return (\n      <div className=\"App container\">\n        <h1 className=\"center teal-text\">Todo List</h1>\n        <Todos deleteTask={this.deleteTask} todos={this.state.todos} s={this.s}/>\n        <AddTodo addTask={this.addTask}/>\n        <div id=\"alert\" className=\"red-text text-lighten-1\"></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}